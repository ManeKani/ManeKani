#!/bin/env python3

import os
import re
from pathlib import Path


def gen_cs_icon(svg: str) -> str:
    return f"""
@* This file was autogenerated using scripts/gen-icons.py *@
@model Pages.Shared.Icons.IconOptions;
@{{
    var width = Model.Size;
    var height = Model.Size+1;
}}
{svg}
""".strip()


def patch_svg(svg: str) -> str:
    svg = re.sub(r'(?<!-)fill="\#[^"]*"', 'fill="@Model.Color"', svg)
    svg = re.sub(r'(?<!-)stroke="\#[^"]*"', 'stroke="@Model.Color"', svg)

    svg = re.sub(r'(?<!-)width="[^"]*"', 'width="@width"', svg, count=1)
    svg = re.sub(r'(?<!-)height="[^"]*"', 'height="@height"', svg, count=1)

    return svg


def read_svg(svg_path: str) -> str:
    with open(svg_path, "r") as f:
        return f.read()


def main():
    for root, _, files in os.walk("Icons"):
        for file in files:
            if file.endswith(".svg"):
                filename = file.split(".")[0]
                print(f"Patching {filename}.svg")

                svg = patch_svg(read_svg(os.path.join(root, file)))
                icon = gen_cs_icon(svg)

                out_path = Path(
                    f"Pages/Shared/Icons/_{filename.replace(" ", "")}.cshtml"
                )

                if out_path.exists:
                    out_path.chmod(0o644)
                with out_path.open("w") as f:
                    print(f"Writing {out_path}")
                    f.write(icon)
                out_path.chmod(0o444)


main()
